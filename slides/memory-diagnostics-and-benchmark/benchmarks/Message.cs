// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TalkToSomeone {

  /// <summary>Holder for reflection information generated from message/message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message/message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtZXNzYWdlL21lc3NhZ2UucHJvdG8SDXRhbGtUb1NvbWVvbmUikQIKB01l",
            "c3NhZ2USCgoCaWQYASABKAkSDAoEZnJvbRgCIAEoCRIKCgJ0bxgDIAEoCRIM",
            "CgR0ZXh0GAQgASgJEhAKCGltYWdlX2lkGAUgASgJEhAKCGF1ZGlvX2lkGAYg",
            "ASgJEhQKDGNvbnRhY3RfY2FyZBgHIAEoCRIVCg1hdWRpb19zZWNvbmRzGAgg",
            "ASgFEhIKCmNyZWF0ZWRfYXQYCSABKBASLAoGU3RhdHVzGAogASgOMhwudGFs",
            "a1RvU29tZW9uZS5NZXNzYWdlU3RhdHVzEg8KB3VzZXJfaWQYCyABKAkSFwoP",
            "dHJhbnNsYXRlZF90ZXh0GAwgASgJEhUKDXByb21vdGlvbl91cmwYDSABKAki",
            "RQoPU2VuZFRleHRNZXNzYWdlEgoKAmlkGAEgASgQEgwKBGZyb20YAiABKAkS",
            "DAoEdGV4dBgDIAEoCRIKCgJ0bxgEIAEoCSJdChBTZW5kSW1hZ2VNZXNzYWdl",
            "EgoKAmlkGAEgASgQEgwKBGZyb20YAiABKAkSEAoIaW1hZ2VfaWQYAyABKAkS",
            "EQoJdGh1bWJuYWlsGAQgASgMEgoKAnRvGAUgASgJIlwKEFNlbmRBdWRpb01l",
            "c3NhZ2USCgoCaWQYASABKBASDAoEZnJvbRgCIAEoCRIQCghhdWRpb19pZBgD",
            "IAEoCRIQCghkdXJhdGlvbhgEIAEoBRIKCgJ0bxgFIAEoCSI1Cg1EZWxldGVN",
            "ZXNzYWdlEgoKAmlkGAEgASgQEgwKBGZyb20YAiABKAkSCgoCdG8YAyABKAki",
            "NQoNUmVjYWxsTWVzc2FnZRIKCgJpZBgBIAEoEBIMCgRmcm9tGAIgASgJEgoK",
            "AnRvGAMgASgJIkQKEFRyYW5zbGF0ZU1lc3NhZ2USDAoEdGV4dBgCIAEoCRIS",
            "Cgp0cmFuc2xhdGVkGAMgASgJEg4KBmxvY2FsZRgEIAEoCSIpCg1DbGVhck1l",
            "c3NhZ2VzEgwKBGZyb20YASABKAkSCgoCdG8YAiABKAkiJwoLUmVhZE1lc3Nh",
            "Z2USDAoEZnJvbRgBIAEoCRIKCgJ0bxgCIAEoCSIiCgZUeXBpbmcSDAoEZnJv",
            "bRgBIAEoCRIKCgJ0bxgCIAEoCSIlCglFbmRUeXBpbmcSDAoEZnJvbRgBIAEo",
            "CRIKCgJ0bxgCIAEoCSIkCghTcGVha2luZxIMCgRmcm9tGAEgASgJEgoKAnRv",
            "GAIgASgJIicKC0VuZFNwZWFraW5nEgwKBGZyb20YASABKAkSCgoCdG8YAiAB",
            "KAkiOgoQSm9pbkNvbnZlcnNhdGlvbhIMCgRmcm9tGAEgASgJEgwKBG5hbWUY",
            "AiABKAkSCgoCdG8YAyABKAkiOwoRTGVhdmVDb252ZXJzYXRpb24SDAoEZnJv",
            "bRgBIAEoCRIMCgRuYW1lGAIgASgJEgoKAnRvGAMgASgJKngKDU1lc3NhZ2VT",
            "dGF0dXMSFwoTbWVzc2FnZV9zdGF0dXNfbm9uZRAAEhoKFm1lc3NhZ2Vfc3Rh",
            "dHVzX3NlbmRpbmcQARIXChNtZXNzYWdlX3N0YXR1c19zZW50EAISGQoVbWVz",
            "c2FnZV9zdGF0dXNfZmFpbGVkEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TalkToSomeone.MessageStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.Message), global::TalkToSomeone.Message.Parser, new[]{ "Id", "From", "To", "Text", "ImageId", "AudioId", "ContactCard", "AudioSeconds", "CreatedAt", "Status", "UserId", "TranslatedText", "PromotionUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.SendTextMessage), global::TalkToSomeone.SendTextMessage.Parser, new[]{ "Id", "From", "Text", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.SendImageMessage), global::TalkToSomeone.SendImageMessage.Parser, new[]{ "Id", "From", "ImageId", "Thumbnail", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.SendAudioMessage), global::TalkToSomeone.SendAudioMessage.Parser, new[]{ "Id", "From", "AudioId", "Duration", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.DeleteMessage), global::TalkToSomeone.DeleteMessage.Parser, new[]{ "Id", "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.RecallMessage), global::TalkToSomeone.RecallMessage.Parser, new[]{ "Id", "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.TranslateMessage), global::TalkToSomeone.TranslateMessage.Parser, new[]{ "Text", "Translated", "Locale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.ClearMessages), global::TalkToSomeone.ClearMessages.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.ReadMessage), global::TalkToSomeone.ReadMessage.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.Typing), global::TalkToSomeone.Typing.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.EndTyping), global::TalkToSomeone.EndTyping.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.Speaking), global::TalkToSomeone.Speaking.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.EndSpeaking), global::TalkToSomeone.EndSpeaking.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.JoinConversation), global::TalkToSomeone.JoinConversation.Parser, new[]{ "From", "Name", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TalkToSomeone.LeaveConversation), global::TalkToSomeone.LeaveConversation.Parser, new[]{ "From", "Name", "To" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MessageStatus {
    [pbr::OriginalName("message_status_none")] None = 0,
    [pbr::OriginalName("message_status_sending")] Sending = 1,
    [pbr::OriginalName("message_status_sent")] Sent = 2,
    [pbr::OriginalName("message_status_failed")] Failed = 3,
  }

  #endregion

  #region Messages
  public partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      from_ = other.from_;
      to_ = other.to_;
      text_ = other.text_;
      imageId_ = other.imageId_;
      audioId_ = other.audioId_;
      contactCard_ = other.contactCard_;
      audioSeconds_ = other.audioSeconds_;
      createdAt_ = other.createdAt_;
      status_ = other.status_;
      userId_ = other.userId_;
      translatedText_ = other.translatedText_;
      promotionUrl_ = other.promotionUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private string text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 5;
    private string imageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = value;
      }
    }

    /// <summary>Field number for the "audio_id" field.</summary>
    public const int AudioIdFieldNumber = 6;
    private string audioId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AudioId {
      get { return audioId_; }
      set {
        audioId_ = value;
      }
    }

    /// <summary>Field number for the "contact_card" field.</summary>
    public const int ContactCardFieldNumber = 7;
    private string contactCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactCard {
      get { return contactCard_; }
      set {
        contactCard_ = value;
      }
    }

    /// <summary>Field number for the "audio_seconds" field.</summary>
    public const int AudioSecondsFieldNumber = 8;
    private int audioSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioSeconds {
      get { return audioSeconds_; }
      set {
        audioSeconds_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 9;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::TalkToSomeone.MessageStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TalkToSomeone.MessageStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 11;
    private string userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "translated_text" field.</summary>
    public const int TranslatedTextFieldNumber = 12;
    private string translatedText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TranslatedText {
      get { return translatedText_; }
      set {
        translatedText_ = value;
      }
    }

    /// <summary>Field number for the "promotion_url" field.</summary>
    public const int PromotionUrlFieldNumber = 13;
    private string promotionUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PromotionUrl {
      get { return promotionUrl_; }
      set {
        promotionUrl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Text != other.Text) return false;
      if (ImageId != other.ImageId) return false;
      if (AudioId != other.AudioId) return false;
      if (ContactCard != other.ContactCard) return false;
      if (AudioSeconds != other.AudioSeconds) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Status != other.Status) return false;
      if (UserId != other.UserId) return false;
      if (TranslatedText != other.TranslatedText) return false;
      if (PromotionUrl != other.PromotionUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != null && Id.Length != 0) hash ^= Id.GetHashCode();
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      if (Text != null && Text.Length != 0) hash ^= Text.GetHashCode();
      if (ImageId != null && ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (AudioId != null && AudioId.Length != 0) hash ^= AudioId.GetHashCode();
      if (ContactCard != null && ContactCard.Length != 0) hash ^= ContactCard.GetHashCode();
      if (AudioSeconds != 0) hash ^= AudioSeconds.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (UserId != null && UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (TranslatedText != null && TranslatedText.Length != 0) hash ^= TranslatedText.GetHashCode();
      if (PromotionUrl != null && PromotionUrl.Length != 0) hash ^= PromotionUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != null && Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (From != null && From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
      if (Text != null && Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (ImageId != null && ImageId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ImageId);
      }
      if (AudioId != null && AudioId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AudioId);
      }
      if (ContactCard != null && ContactCard.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ContactCard);
      }
      if (AudioSeconds != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AudioSeconds);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(73);
        output.WriteSFixed64(CreatedAt);
      }
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
      if (UserId != null && UserId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UserId);
      }
      if (TranslatedText != null && TranslatedText.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TranslatedText);
      }
      if (PromotionUrl != null && PromotionUrl.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PromotionUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != null && Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (Text != null && Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (ImageId != null && ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (AudioId != null && AudioId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioId);
      }
      if (ContactCard != null && ContactCard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactCard);
      }
      if (AudioSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioSeconds);
      }
      if (CreatedAt != 0L) {
        size += 1 + 8;
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (UserId != null && UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (TranslatedText != null && TranslatedText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TranslatedText);
      }
      if (PromotionUrl != null && PromotionUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PromotionUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != null && other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
      if (other.Text != null && other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.ImageId != null && other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      if (other.AudioId != null && other.AudioId.Length != 0) {
        AudioId = other.AudioId;
      }
      if (other.ContactCard != null && other.ContactCard.Length != 0) {
        ContactCard = other.ContactCard;
      }
      if (other.AudioSeconds != 0) {
        AudioSeconds = other.AudioSeconds;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.UserId != null && other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.TranslatedText != null && other.TranslatedText.Length != 0) {
        TranslatedText = other.TranslatedText;
      }
      if (other.PromotionUrl != null && other.PromotionUrl.Length != 0) {
        PromotionUrl = other.PromotionUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 42: {
            ImageId = input.ReadString();
            break;
          }
          case 50: {
            AudioId = input.ReadString();
            break;
          }
          case 58: {
            ContactCard = input.ReadString();
            break;
          }
          case 64: {
            AudioSeconds = input.ReadInt32();
            break;
          }
          case 73: {
            CreatedAt = input.ReadSFixed64();
            break;
          }
          case 80: {
            status_ = (global::TalkToSomeone.MessageStatus) input.ReadEnum();
            break;
          }
          case 90: {
            UserId = input.ReadString();
            break;
          }
          case 98: {
            TranslatedText = input.ReadString();
            break;
          }
          case 106: {
            PromotionUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SendTextMessage : pb::IMessage<SendTextMessage> {
    private static readonly pb::MessageParser<SendTextMessage> _parser = new pb::MessageParser<SendTextMessage>(() => new SendTextMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTextMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTextMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTextMessage(SendTextMessage other) : this() {
      id_ = other.id_;
      from_ = other.from_;
      text_ = other.text_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTextMessage Clone() {
      return new SendTextMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  message unique id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_;
    /// <summary>
    ///  sender user id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 4;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTextMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTextMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (From != other.From) return false;
      if (Text != other.Text) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (Text != null && Text.Length != 0) hash ^= Text.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Id);
      }
      if (From != null && From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (Text != null && Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + 8;
      }
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (Text != null && Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTextMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.Text != null && other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Id = input.ReadSFixed64();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 34: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SendImageMessage : pb::IMessage<SendImageMessage> {
    private static readonly pb::MessageParser<SendImageMessage> _parser = new pb::MessageParser<SendImageMessage>(() => new SendImageMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendImageMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendImageMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendImageMessage(SendImageMessage other) : this() {
      id_ = other.id_;
      from_ = other.from_;
      imageId_ = other.imageId_;
      thumbnail_ = other.thumbnail_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendImageMessage Clone() {
      return new SendImageMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 3;
    private string imageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = value;
      }
    }

    /// <summary>Field number for the "thumbnail" field.</summary>
    public const int ThumbnailFieldNumber = 4;
    private pb::ByteString thumbnail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 5;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendImageMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendImageMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (From != other.From) return false;
      if (ImageId != other.ImageId) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (ImageId != null && ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (Thumbnail != null && Thumbnail.Length != 0) hash ^= Thumbnail.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Id);
      }
      if (From != null && From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (ImageId != null && ImageId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageId);
      }
      if (Thumbnail != null && Thumbnail.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Thumbnail);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + 8;
      }
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (ImageId != null && ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (Thumbnail != null && Thumbnail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Thumbnail);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendImageMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.ImageId != null && other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      if (other.Thumbnail != null && other.Thumbnail.Length != 0) {
        Thumbnail = other.Thumbnail;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Id = input.ReadSFixed64();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            ImageId = input.ReadString();
            break;
          }
          case 34: {
            Thumbnail = input.ReadBytes();
            break;
          }
          case 42: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SendAudioMessage : pb::IMessage<SendAudioMessage> {
    private static readonly pb::MessageParser<SendAudioMessage> _parser = new pb::MessageParser<SendAudioMessage>(() => new SendAudioMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendAudioMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAudioMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAudioMessage(SendAudioMessage other) : this() {
      id_ = other.id_;
      from_ = other.from_;
      audioId_ = other.audioId_;
      duration_ = other.duration_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAudioMessage Clone() {
      return new SendAudioMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "audio_id" field.</summary>
    public const int AudioIdFieldNumber = 3;
    private string audioId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AudioId {
      get { return audioId_; }
      set {
        audioId_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private int duration_;
    /// <summary>
    ///  In seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 5;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendAudioMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendAudioMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (From != other.From) return false;
      if (AudioId != other.AudioId) return false;
      if (Duration != other.Duration) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (AudioId != null && AudioId.Length != 0) hash ^= AudioId.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Id);
      }
      if (From != null && From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (AudioId != null && AudioId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AudioId);
      }
      if (Duration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Duration);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + 8;
      }
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (AudioId != null && AudioId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioId);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendAudioMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.AudioId != null && other.AudioId.Length != 0) {
        AudioId = other.AudioId;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Id = input.ReadSFixed64();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            AudioId = input.ReadString();
            break;
          }
          case 32: {
            Duration = input.ReadInt32();
            break;
          }
          case 42: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class DeleteMessage : pb::IMessage<DeleteMessage> {
    private static readonly pb::MessageParser<DeleteMessage> _parser = new pb::MessageParser<DeleteMessage>(() => new DeleteMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMessage(DeleteMessage other) : this() {
      id_ = other.id_;
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMessage Clone() {
      return new DeleteMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Id);
      }
      if (From != null && From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + 8;
      }
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Id = input.ReadSFixed64();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class RecallMessage : pb::IMessage<RecallMessage> {
    private static readonly pb::MessageParser<RecallMessage> _parser = new pb::MessageParser<RecallMessage>(() => new RecallMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecallMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecallMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecallMessage(RecallMessage other) : this() {
      id_ = other.id_;
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecallMessage Clone() {
      return new RecallMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecallMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecallMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Id);
      }
      if (From != null && From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + 8;
      }
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecallMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Id = input.ReadSFixed64();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class TranslateMessage : pb::IMessage<TranslateMessage> {
    private static readonly pb::MessageParser<TranslateMessage> _parser = new pb::MessageParser<TranslateMessage>(() => new TranslateMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TranslateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TranslateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TranslateMessage(TranslateMessage other) : this() {
      text_ = other.text_;
      translated_ = other.translated_;
      locale_ = other.locale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TranslateMessage Clone() {
      return new TranslateMessage(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "translated" field.</summary>
    public const int TranslatedFieldNumber = 3;
    private string translated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Translated {
      get { return translated_; }
      set {
        translated_ = value;
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 4;
    private string locale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TranslateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TranslateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (Translated != other.Translated) return false;
      if (Locale != other.Locale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text != null && Text.Length != 0) hash ^= Text.GetHashCode();
      if (Translated != null && Translated.Length != 0) hash ^= Translated.GetHashCode();
      if (Locale != null && Locale.Length != 0) hash ^= Locale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text != null && Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (Translated != null && Translated.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Translated);
      }
      if (Locale != null && Locale.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Locale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text != null && Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Translated != null && Translated.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Translated);
      }
      if (Locale != null && Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TranslateMessage other) {
      if (other == null) {
        return;
      }
      if (other.Text != null && other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Translated != null && other.Translated.Length != 0) {
        Translated = other.Translated;
      }
      if (other.Locale != null && other.Locale.Length != 0) {
        Locale = other.Locale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Text = input.ReadString();
            break;
          }
          case 26: {
            Translated = input.ReadString();
            break;
          }
          case 34: {
            Locale = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class ClearMessages : pb::IMessage<ClearMessages> {
    private static readonly pb::MessageParser<ClearMessages> _parser = new pb::MessageParser<ClearMessages>(() => new ClearMessages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearMessages(ClearMessages other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearMessages Clone() {
      return new ClearMessages(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != null && From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearMessages other) {
      if (other == null) {
        return;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class ReadMessage : pb::IMessage<ReadMessage> {
    private static readonly pb::MessageParser<ReadMessage> _parser = new pb::MessageParser<ReadMessage>(() => new ReadMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadMessage(ReadMessage other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadMessage Clone() {
      return new ReadMessage(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != null && From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadMessage other) {
      if (other == null) {
        return;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Typing : pb::IMessage<Typing> {
    private static readonly pb::MessageParser<Typing> _parser = new pb::MessageParser<Typing>(() => new Typing());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Typing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Typing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Typing(Typing other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Typing Clone() {
      return new Typing(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Typing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Typing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != null && From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Typing other) {
      if (other == null) {
        return;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class EndTyping : pb::IMessage<EndTyping> {
    private static readonly pb::MessageParser<EndTyping> _parser = new pb::MessageParser<EndTyping>(() => new EndTyping());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndTyping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndTyping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndTyping(EndTyping other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndTyping Clone() {
      return new EndTyping(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndTyping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndTyping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != null && From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndTyping other) {
      if (other == null) {
        return;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Speaking : pb::IMessage<Speaking> {
    private static readonly pb::MessageParser<Speaking> _parser = new pb::MessageParser<Speaking>(() => new Speaking());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Speaking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speaking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speaking(Speaking other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speaking Clone() {
      return new Speaking(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Speaking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Speaking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != null && From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Speaking other) {
      if (other == null) {
        return;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class EndSpeaking : pb::IMessage<EndSpeaking> {
    private static readonly pb::MessageParser<EndSpeaking> _parser = new pb::MessageParser<EndSpeaking>(() => new EndSpeaking());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndSpeaking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndSpeaking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndSpeaking(EndSpeaking other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndSpeaking Clone() {
      return new EndSpeaking(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndSpeaking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndSpeaking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != null && From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndSpeaking other) {
      if (other == null) {
        return;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class JoinConversation : pb::IMessage<JoinConversation> {
    private static readonly pb::MessageParser<JoinConversation> _parser = new pb::MessageParser<JoinConversation>(() => new JoinConversation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinConversation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinConversation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinConversation(JoinConversation other) : this() {
      from_ = other.from_;
      name_ = other.name_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinConversation Clone() {
      return new JoinConversation(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinConversation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinConversation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (Name != other.Name) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (Name != null && Name.Length != 0) hash ^= Name.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != null && From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (Name != null && Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (Name != null && Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinConversation other) {
      if (other == null) {
        return;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.Name != null && other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class LeaveConversation : pb::IMessage<LeaveConversation> {
    private static readonly pb::MessageParser<LeaveConversation> _parser = new pb::MessageParser<LeaveConversation>(() => new LeaveConversation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveConversation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TalkToSomeone.MessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveConversation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveConversation(LeaveConversation other) : this() {
      from_ = other.from_;
      name_ = other.name_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveConversation Clone() {
      return new LeaveConversation(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveConversation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveConversation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (Name != other.Name) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != null && From.Length != 0) hash ^= From.GetHashCode();
      if (Name != null && Name.Length != 0) hash ^= Name.GetHashCode();
      if (To != null && To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != null && From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (Name != null && Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (To != null && To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != null && From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (Name != null && Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (To != null && To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveConversation other) {
      if (other == null) {
        return;
      }
      if (other.From != null && other.From.Length != 0) {
        From = other.From;
      }
      if (other.Name != null && other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.To != null && other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
